all_first_sets = {
    'Program': {'t_bool', 't_int', 't_char'},
    'DeclarationBlock': {'t_bool', 't_int', 't_char'},
    'DeclarationExtension': {'t_bool', 't_int', 't_char', 'ε'},
    'SingleDec': {'t_bool', 't_int', 't_char'},
    'DeclarationType': {'t_comma', 't_assign', 't_lb', 't_semicolon', 't_lp'},
    'DataType': {'t_bool', 't_int', 't_char'},
    'VariableDeclaration': {'t_assign', 't_comma', 't_lb', 't_semicolon'},
    'VariableList': {'t_assign', 't_comma', 't_lb', 'ε'},
    'VariableListExtension': {'t_comma', 'ε'},
    'VariableInitializer': {'t_assign', 't_lb', 'ε'},
    'VarInitializerExtension': {'t_assign', 'ε'},
    'ArrayDeclaration': {'t_lb', 'ε'},
    'ArrayDimension': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_lop_not', 't_true', 't_lp', 't_char', 't_false', 'ε', 't_string', 't_hexadecimal'},
    'FunctionDeclaration': {'t_lp'},
    'FunctionParameters': {'t_bool', 't_int', 't_char', 'ε'},
    'ParametersList': {'t_bool', 't_int', 't_char'},
    'ParametersExtension': {'t_comma', 'ε'},
    'ActionStatement': {'t_bool', 't_for', 't_lc', 't_id', 't_return', 't_continue', 't_int', 't_break', 't_char', 't_print', 't_if'},
    'CompoundStatement': {'t_lc'},
    'StatementSequence': {'t_bool', 't_for', 't_lc', 't_id', 't_return', 't_continue', 't_int', 't_break', 't_char', 't_print', 'ε', 't_if'},
    'ConditionStatement': {'t_if'},
    'AlternativeStatement': {'t_else', 'ε'},
    'IterationStatement': {'t_for'},
    'ForInitialization': {'t_bool', 't_id', 't_char', 't_int', 't_semicolon'},
    'LoopVarInitialization': {'t_bool', 't_id', 't_char', 'ε', 't_int'},
    'LoopExpression': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_lop_not', 't_true', 't_lp', 't_char', 't_false', 'ε', 't_string', 't_hexadecimal'},
    'LoopStep': {'t_id', 'ε'},
    'SimpleAction': {'t_id'},
    'SimpleAction2': {'t_id'},
    'ArrayAccess': {'t_lb', 'ε'},
    'ArrayDimension2': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_lop_not', 't_true', 't_lp', 't_char', 't_false', 't_string', 't_hexadecimal'},
    'VariableDeclarationStatement': {'t_bool', 't_int', 't_char'},
    'ReturnAction': {'t_return'},
    'BreakAction': {'t_break'},
    'ContinueAction': {'t_continue'},
    'OutputStatement': {'t_print'},
    'OutputRules': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_lop_not', 't_true', 't_lp', 't_char', 't_false', 't_string', 't_hexadecimal'},
    'PrintExtension': {'t_comma', 'ε'},
    'ExpressionStructure': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_lop_not', 't_true', 't_lp', 't_char', 't_false', 't_string', 't_hexadecimal'},
    'LogicalExpression': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_lop_not', 't_true', 't_lp', 't_char', 't_false', 't_string', 't_hexadecimal'},
    'OrExtension': {'t_lop_or', 'ε'},
    'AndExpression': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_lop_not', 't_true', 't_lp', 't_char', 't_false', 't_string', 't_hexadecimal'},
    'AndChain': {'t_lop_and', 'ε'},
    'NegationExpression': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_lop_not', 't_true', 't_lp', 't_char', 't_false', 't_string', 't_hexadecimal'},
    'ComparisonExpression': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_true', 't_lp', 't_char', 't_false', 't_string', 't_hexadecimal'},
    'ComparisonExtension': {'t_rop_le', 't_rop_l', 't_rop_ne', 't_rop_ge', 't_rop_g', 'ε', 't_rop_e'},
    'ComparisonOps': {'t_rop_le', 't_rop_l', 't_rop_ne', 't_rop_ge', 't_rop_g', 't_rop_e'},
    'SimpleExpression': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_true', 't_lp', 't_char', 't_false', 't_string', 't_hexadecimal'},
    'ArithmeticChain1': {'t_aop_pl', 't_aop_mn', 'ε'},
    'ArithmeticTerm': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_true', 't_lp', 't_char', 't_false', 't_string', 't_hexadecimal'},
    'ArithmeticChain2': {'t_aop_rm', 't_aop_ml', 't_aop_dv', 'ε'},
    'ArithmeticFactor': {'t_aop_pl', 't_decimal', 't_aop_mn', 't_id', 't_true', 't_lp', 't_char', 't_false', 't_string', 't_hexadecimal'},
    'Elementary': {'t_decimal', 't_id', 't_char', 't_false', 't_string', 't_true', 't_hexadecimal', 't_lp'},
    'FunctionOrArrayAccess': {'t_lp', 'ε'},
    'DetailedParameters': {'t_id', 'ε'},
    'ParametersList2': {'t_id'},
    'ParametersTail': {'t_comma', 'ε'},
}

all_follow_sets = {
    'Program': {'$'},
    'DeclarationBlock': {'$'},
    'DeclarationExtension': {'$'},
    'SingleDec': {'t_bool', 't_int', '$', 't_char'},
    'DeclarationType': {'t_int', '$', 't_bool', 't_char'},
    'DataType': {'t_id'},
    'VariableDeclaration': {'t_int', '$', 't_bool', 't_char'},
    'VariableList': {'t_semicolon'},
    'VariableListExtension': {'t_semicolon'},
    'VariableInitializer': {'t_comma', 't_semicolon'},
    'VarInitializerExtension': {'t_comma', 't_semicolon'},
    'ArrayDeclaration': {'t_semicolon', 't_assign', 't_comma', 't_rp'},
    'ArrayDimension': {'t_rb'},
    'FunctionDeclaration': {'t_int', '$', 't_bool', 't_char'},
    'FunctionParameters': {'t_rp'},
    'ParametersList': {'t_rp'},
    'ParametersExtension': {'t_rp'},
    'ActionStatement': {'t_rc', 't_print', '$', 't_if', 't_for', 't_int', 't_id', 't_lc', 't_break', 't_bool', 't_continue', 't_char', 't_return'},
    'CompoundStatement': {'t_rc', 't_print', '$', 't_if', 't_for', 't_int', 't_id', 't_lc', 't_break', 't_bool', 't_continue', 't_else', 't_return', 't_char'},
    'StatementSequence': {'t_rc'},
    'ConditionStatement': {'t_rc', 't_print', '$', 't_if', 't_for', 't_int', 't_id', 't_lc', 't_break', 't_bool', 't_continue', 't_char', 't_return'},
    'AlternativeStatement': {'t_rc', 't_print', '$', 't_if', 't_for', 't_int', 't_id', 't_lc', 't_break', 't_bool', 't_continue', 't_char', 't_return'},
    'IterationStatement': {'t_rc', 't_print', '$', 't_if', 't_for', 't_int', 't_id', 't_lc', 't_break', 't_bool', 't_continue', 't_char', 't_return'},
    'ForInitialization': {'t_rp'},
    'LoopVarInitialization': {'t_semicolon'},
    'LoopExpression': {'t_semicolon'},
    'LoopStep': {'t_rp'},
    'SimpleAction': {'t_rc', 't_print', '$', 't_if', 't_for', 't_int', 't_id', 't_lc', 't_break', 't_bool', 't_continue', 't_char', 't_return'},
    'SimpleAction2': {'t_rp'},
    'ArrayAccess': {'t_assign'},
    'ArrayDimension2': {'t_rb'},
    'VariableDeclarationStatement': {'t_rc', 't_print', '$', 't_if', 't_for', 't_int', 't_id', 't_lc', 't_break', 't_bool', 't_continue', 't_char', 't_return'},
    'ReturnAction': {'t_rc', 't_print', '$', 't_if', 't_for', 't_int', 't_id', 't_lc', 't_break', 't_bool', 't_continue', 't_char', 't_return'},
    'BreakAction': {'t_rc', 't_print', '$', 't_if', 't_for', 't_int', 't_id', 't_lc', 't_break', 't_bool', 't_continue', 't_char', 't_return'},
    'ContinueAction': {'t_rc', 't_print', '$', 't_if', 't_for', 't_int', 't_id', 't_lc', 't_break', 't_bool', 't_continue', 't_char', 't_return'},
    'OutputStatement': {'t_rc', 't_print', '$', 't_if', 't_for', 't_int', 't_id', 't_lc', 't_break', 't_bool', 't_continue', 't_char', 't_return'},
    'OutputRules': {'t_rp'},
    'PrintExtension': {'t_rp'},
    'ExpressionStructure': {'t_lc', 't_semicolon', 't_comma', 't_rp', 't_rb'},
    'LogicalExpression': {'t_lc', 't_semicolon', 't_comma', 't_rp', 't_rb'},
    'OrExtension': {'t_lc', 't_semicolon', 't_comma', 't_rp', 't_rb'},
    'AndExpression': {'t_lc', 't_semicolon', 't_comma', 't_rp', 't_rb', 't_lop_or'},
    'AndChain': {'t_lc', 't_semicolon', 't_comma', 't_rp', 't_rb', 't_lop_or'},
    'NegationExpression': {'t_lc', 't_semicolon', 't_comma', 't_rp', 't_rb', 't_lop_or', 't_lop_and'},
    'ComparisonExpression': {'t_lc', 't_semicolon', 't_comma', 't_rp', 't_rb', 't_lop_or', 't_lop_and'},
    'ComparisonExtension': {'t_lc', 't_semicolon', 't_comma', 't_rp', 't_rb', 't_lop_or', 't_lop_and'},
    'ComparisonOps': {'t_true', 't_aop_mn', 't_lp', 't_hexadecimal', 't_false', 't_id', 't_decimal', 't_aop_pl', 't_string', 't_char'},
    'SimpleExpression': {'t_comma', 't_rop_g', 't_lop_or', 't_rop_e', 't_rop_ge', 't_lc', 't_rop_l', 't_semicolon', 't_rp', 't_rb', 't_rop_le', 't_lop_and', 't_rop_ne'},
    'ArithmeticChain1': {'t_comma', 't_rop_g', 't_lop_or', 't_rop_e', 't_rop_ge', 't_lc', 't_rop_l', 't_semicolon', 't_rp', 't_rb', 't_rop_le', 't_lop_and', 't_rop_ne'},
    'ArithmeticTerm': {'t_aop_mn', 't_comma', 't_rop_g', 't_lop_or', 't_rop_e', 't_rop_ge', 't_lc', 't_rop_l', 't_semicolon', 't_aop_pl', 't_rp', 't_rb', 't_rop_le', 't_lop_and', 't_rop_ne'},
    'ArithmeticChain2': {'t_aop_mn', 't_comma', 't_rop_g', 't_lop_or', 't_rop_e', 't_rop_ge', 't_lc', 't_rop_l', 't_semicolon', 't_aop_pl', 't_rp', 't_rb', 't_rop_le', 't_lop_and', 't_rop_ne'},
    'ArithmeticFactor': {'t_aop_mn', 't_comma', 't_aop_dv', 't_aop_rm', 't_rop_g', 't_lop_or', 't_rop_e', 't_rop_ge', 't_lc', 't_rop_l', 't_semicolon', 't_aop_pl', 't_rp', 't_rb', 't_rop_le', 't_lop_and', 't_rop_ne', 't_aop_ml'},
    'Elementary': {'t_aop_mn', 't_comma', 't_aop_dv', 't_aop_rm', 't_rop_g', 't_lop_or', 't_rop_e', 't_rop_ge', 't_lc', 't_rop_l', 't_semicolon', 't_aop_pl', 't_rp', 't_rb', 't_rop_le', 't_lop_and', 't_rop_ne', 't_aop_ml'},
    'FunctionOrArrayAccess': {'t_aop_mn', 't_comma', 't_aop_dv', 't_aop_rm', 't_rop_g', 't_lop_or', 't_rop_e', 't_rop_ge', 't_lc', 't_rop_l', 't_semicolon', 't_aop_pl', 't_rp', 't_rb', 't_rop_le', 't_lop_and', 't_rop_ne', 't_aop_ml'},
    'DetailedParameters': {'t_rp'},
    'ParametersList2': {'t_rp'},
    'ParametersTail': {'t_rp'},
}
